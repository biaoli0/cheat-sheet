#### lazy state initialisation
const [name, setName] = React.useState(
  () => window.localStorage.getItem('name') || initialName,
)
// It will not call localStorage every time.

#### custom hooks
// With prefix 'use' it will not be complained by React convention and Eslint, but that doesn't make 
// the feature any different.
function useLocalStorageState(key, defaultValue = '') {
  const [state, setState] = React.useState(
    () => window.localStorage.getItem(key) || defaultValue,
  )
  return [state, setState];
}
function Greeting({initialName}) {
  const [name, setName] = useLocalStorageState('name', initialName);
}

#### useRef
// useRef should be used when you want to have a piece of information that 
// persists "for the full lifetime of the component" 
const prevKeyPref = React.useRef(key);
React.useEffect(()=>{
  const prevKey = prevKeyPref.current; // old key
  const prevKeyPref.current =  newKey; // update key
});

#### useRef vs useState
// Use useRef when you need information that is available regardless of 
// component lifecycle and whose changes should NOT trigger rerender. 
// Use useState for information whose changes should trigger rerenders.

